name: Nightly Build

on:
  schedule:
  - cron: "45 22 * * *"
  repository_dispatch:

jobs:  
  unittests:
    name: "Nightly Build Unit Tests"

    env:
        ASPNETCORE_ENVIRONMENT: "Production"
        NODE_VERSION: '14.x'                # set this to the node version to use

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4
  
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1.4.4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Restore Nuget Packages
      run: dotnet restore EstateAdministrationUI.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: |
        dotnet build EstateAdministrationUI.sln --configuration ReleaseNoNode

    - name: Run Unit Tests
      run: |
        echo "ASPNETCORE_ENVIRONMENT are > ${ASPNETCORE_ENVIRONMENT}"
        dotnet test "EstateAdministrationUI.Tests\EstateAdministrationUI.Tests.csproj"
        dotnet test "EstateAdministrationUI.BusinessLogic.Tests\EstateAdministrationUI.BusinessLogic.Tests.csproj"
    
    - name: Run Javascript Unit Tests
      run: |
        cd EstateAdministrationUI.Javascript.Tests
        npm install
        npm run test

  firefoxbuild:
    name: "Nightly Build - Firefox"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Set Up Variables
      run: echo "action_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV

    - name: Trust Certificate
      run: |
        sudo apt-get install expect
        certPath="$GITHUB_WORKSPACE/Certificates/aspnetapp-root-cert.pfx"
        password="password"

        # Use expect to automate the passphrase input
        expect -c "
        spawn openssl pkcs12 -in \"$certPath\" -clcerts -nokeys -out certificate.crt -password pass:\"$password\"
        expect \"Enter Import Password:\" { send \"$password\n\" }
        expect eof
        "

        expect -c "
        spawn openssl pkcs12 -in \"$certPath\" -nocerts -out private.key -password pass:\"$password\"
        expect \"Enter Import Password:\" { send \"$password\n\" }
        expect eof
        "

        sudo cp certificate.crt /usr/local/share/ca-certificates/aspnetapp-root-cert.crt
        sudo update-ca-certificates

        sudo cp private.key /etc/ssl/private/aspnetapp-root-cert.key
        sudo chmod 400 /etc/ssl/private/aspnetapp-root-cert.key

    - name: Build Docker Image
      run: docker build . --file EstateAdministrationUI/Dockerfile --tag estateadministrationui:latest

    - name: Install NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0.x'
                
    - name: Run Integration Tests (Firefox)
      env:
        Browser: Firefox
      run: dotnet test "EstateAdministrationUI.IntegrationTests\EstateAdministrationUI.IntegrationTests.csproj" --filter Category=PRTest

    - name: Create Issue on Failed workflow
      if: ${{ failure() }}
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: Investigate Nightly Build Failure - Firefox
        body: Url is ${{env.action_url}}
        labels: nightlybuild

  chromebuild:
    name: "Nightly Build - Chrome"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2.3.4

    - name: Set Up Variables
      run: echo "action_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV

    - name: Trust Certificate
      run: |
        sudo apt-get install expect
        certPath="$GITHUB_WORKSPACE/Certificates/aspnetapp-root-cert.pfx"
        password="password"

        # Use expect to automate the passphrase input
        expect -c "
        spawn openssl pkcs12 -in \"$certPath\" -clcerts -nokeys -out certificate.crt -password pass:\"$password\"
        expect \"Enter Import Password:\" { send \"$password\n\" }
        expect eof
        "

        expect -c "
        spawn openssl pkcs12 -in \"$certPath\" -nocerts -out private.key -password pass:\"$password\"
        expect \"Enter Import Password:\" { send \"$password\n\" }
        expect eof
        "

        sudo cp certificate.crt /usr/local/share/ca-certificates/aspnetapp-root-cert.crt
        sudo update-ca-certificates

        sudo cp private.key /etc/ssl/private/aspnetapp-root-cert.key
        sudo chmod 400 /etc/ssl/private/aspnetapp-root-cert.key

    - name: Build Docker Image
      run: docker build . --file EstateAdministrationUI/Dockerfile --tag estateadministrationui:latest

    - name: Install NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0.x'
                
    - name: Run Integration Tests (Chrome)
      env:
        Browser: Chrome
      run: dotnet test "EstateAdministrationUI.IntegrationTests\EstateAdministrationUI.IntegrationTests.csproj" --filter Category=PRTest

    - name: Create Issue on Failed workflow
      if: ${{ failure() }}
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: Investigate Nightly Build Failure - Chrome
        body: Url is ${{env.action_url}}
        labels: nightlybuild

  edgebuild:
    name: "Nightly Build - Edge"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"
        NODE_VERSION: '12.x'                # set this to the node version to use

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Set Up Variables
      run: echo "action_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV
          
    - name: Trust Certificate
      run: |
        sudo apt-get install expect
        certPath="$GITHUB_WORKSPACE/Certificates/aspnetapp-root-cert.pfx"
        password="password"

        # Use expect to automate the passphrase input
        expect -c "
        spawn openssl pkcs12 -in \"$certPath\" -clcerts -nokeys -out certificate.crt -password pass:\"$password\"
        expect \"Enter Import Password:\" { send \"$password\n\" }
        expect eof
        "

        expect -c "
        spawn openssl pkcs12 -in \"$certPath\" -nocerts -out private.key -password pass:\"$password\"
        expect \"Enter Import Password:\" { send \"$password\n\" }
        expect eof
        "

        sudo cp certificate.crt /usr/local/share/ca-certificates/aspnetapp-root-cert.crt
        sudo update-ca-certificates

        sudo cp private.key /etc/ssl/private/aspnetapp-root-cert.key
        sudo chmod 400 /etc/ssl/private/aspnetapp-root-cert.key    

    - name: Build Docker Image
      run: docker build . --file EstateAdministrationUI/Dockerfile --tag estateadministrationui:latest

    - name: Install NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0.x'

    - name: Run Integration Tests (Edge)
      env:
        Browser: Edge
        DriverPath: C:\\SeleniumWebDrivers\\EdgeDriver\\
        DriverExe: msedgedriver.exe
      run: dotnet test "EstateAdministrationUI.IntegrationTests\EstateAdministrationUI.IntegrationTests.csproj" --filter Category=PRTest

    - name: Create Issue on Failed workflow
      if: ${{ failure() }}
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: Investigate Nightly Build Failure - Edge
        body: Url is ${{env.action_url}}
        labels: nightlybuild

  codecoverage:
    name: "Nightly Build - Code Coverage"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Install NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0.101'

    - name: Restore Nuget Packages
      run: dotnet restore EstateAdministrationUI.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: dotnet build EstateAdministrationUI.sln --configuration ReleaseNoNode

    - name: Run Unit Tests
      run: |
        echo "ASPNETCORE_ENVIRONMENT are > ${ASPNETCORE_ENVIRONMENT}"
        dotnet test "EstateAdministrationUI.Tests\EstateAdministrationUI.Tests.csproj" /p:CollectCoverage=true /p:Exclude="[xunit*]*" /p:ExcludeByAttribute="Obsolete" /p:ExcludeByAttribute="GeneratedCodeAttribute" /p:ExcludeByAttribute="CompilerGeneratedAttribute" /p:ExcludeByAttribute="ExcludeFromCodeCoverageAttribute" /p:CoverletOutput="../lcov1.info" /maxcpucount:1 /p:CoverletOutputFormat="lcov"
        dotnet test "EstateAdministrationUI.BusinessLogic.Tests\EstateAdministrationUI.BusinessLogic.Tests.csproj" /p:CollectCoverage=true /p:Exclude="[xunit*]*" /p:ExcludeByAttribute="Obsolete" /p:ExcludeByAttribute="GeneratedCodeAttribute" /p:ExcludeByAttribute="CompilerGeneratedAttribute" /p:ExcludeByAttribute="ExcludeFromCodeCoverageAttribute" /p:CoverletOutput="../lcov2.info" /maxcpucount:1 /p:CoverletOutputFormat="lcov"
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3  
      with:
        files: ./lcov1.info,./lcov2.info
