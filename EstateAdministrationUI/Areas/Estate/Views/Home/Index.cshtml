@using EstateAdministrationUI.Common
@inject IConfigurationService Configuration

@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Areas/Estate/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="form-group">
            <label for="ComparisonDateSelect">Select Comparison Date:</label>
            <select class="custom-select" id="ComparisonDateSelect" style="width: 250px"></select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 col-sm-6 col-12">
            <div id="salesKpi" class="info-box bg-gradient-info">
                <span class="info-box-icon">
                    <i class="fa fa-receipt"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">Today's Sales</span>
                    <span class="info-box-number" id="todaysSalesLabel"></span>
                    <span class="info-box-text" id="comparisonDateSalesLabelText"></span>
                    <span class="info-box-number" id="comparisonDateSalesLabel"></span>
                    <span class="info-box-text">Variance</span>
                    <span class="info-box-text" id="salesVarianceLabelText"></span>
                </div>
            </div>
        </div>
        <div class="col-md-3 col-sm-6 col-12">
            <div id="settlementKpi" class="info-box bg-gradient-info">
                <span class="info-box-icon">
                    <i class="fa fa-money-bill-wave"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">Today's Settlement</span>
                    <span class="info-box-number" id="todaysSettlementLabel"></span>
                    <span class="info-box-text" id="comparisonDateSettlementLabelText"></span>
                    <span class="info-box-number" id="comparisonDateSettlementLabel"></span>
                    <span class="info-box-text">Variance</span>
                    <span class="info-box-text" id="settlementVarianceLabelText"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-6" id="salesvaluebyhourchart" style="height: 400px"></div>
        <div class="col-6" id="salescountbyhourchart" style="height: 400px"></div>
    </div>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script src="~/js/shared.js"></script>
<script src="~/js/resulthandlers.js"></script>

<script language="javascript">

    //google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.load('current', { 'packages': ['line'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawCharts);

    $(document).ready(function () {
        const select = document.getElementById('ComparisonDateSelect');
        select.addEventListener("change", (event) => {                       
            const selectedOption = select.options[select.selectedIndex];

            const selectedText = selectedOption.text;
            const selectedValue = selectedOption.value;

            dateComparisonChanged(selectedValue, selectedText);
        });
        initDatePicker();        
    });

    function dateComparisonChanged(selectedValue, text){               
        getComparisonDateTransactionsAsJson(selectedValue,text)
        
        //getTodaysSettlementAsJson();
        getComparisonDateSettlementAsJson(selectedValue, text);

        drawCharts();
    }
    
    function getComparisonDateTransactionsAsJson(comparisonDate, comparisonDateLabel) {
        var url = '@Url.Action("GetComparisonDateTransactionsAsJson", "Reporting", new { Area = "Estate" })' + "?comparisonDate=" + comparisonDate + "&comparisonDateLabel=" + comparisonDateLabel;
        // make the http call
        makeHttpPOSTWithHandler(url, comparisonDateTransactionsResultHandler);
    }              
    
    function getComparisonDateSettlementAsJson(comparisonDate, comparisonDateLabel) {
        var url = '@Url.Action("GetComparisonDateSettlementAsJson", "Home", new { Area = "Estate" })' + "?comparisonDate=" + comparisonDate + "&comparisonDateLabel=" + comparisonDateLabel;
        makeHttpPOSTWithHandler(url, comparisonDateSettlementResultHandler);
    }

    function initDatePicker() {
        const select = document.getElementById('ComparisonDateSelect');
        $.ajax({
            url: '@Url.Action("GetComparisonDatesAsJson", "Home", new { Area = "Estate" })',
            type: "POST",
            dataType: 'json'
        }).done(function (results) {  
            results.forEach(function (dateOption) {
                const newOption = document.createElement('option');
                newOption.value = dateOption.item1; // This will be a date
                newOption.text = dateOption.item2;

                select.appendChild(newOption);                
            });    
            select.selectedIndex = 0;
            const changeEvent = new Event("change");
            select.dispatchEvent(changeEvent);
        });        
    }

    function convertJsonToArray(jsonData, type) {
        var data = JSON.parse(jsonData);
        
        var dataArray = [];

        // TODO: Factory method
        if (type === 1) 
        {
            // sales value
            dataArray = translateSalesValueByHour(data);
        }
        else{
            // sales count
            dataArray = translateSalesCountByHour(data);
        }

        return google.visualization.arrayToDataTable(dataArray);
    }

    function drawCharts(){
        // Get the comparison date
        var comparisonDateSelect = document.getElementById("ComparisonDateSelect");;
        const selectedOption = comparisonDateSelect.options[comparisonDateSelect.selectedIndex];

        const comparisonDateLabel = selectedOption.text;
        const comparisonDate = selectedOption.value;
                
        drawSalesValueByHourChart(comparisonDate, comparisonDateLabel);
        drawSalesCountByHourChart(comparisonDate, comparisonDateLabel);
    }

    function drawSalesValueByHourChart(comparisonDate, comparisonDateLabel) {
        var url = '@Url.Action("GetSalesValueByHourAsJson", "Home", new { Area = "Estate" })' + "?comparisonDate=" + comparisonDate;
        var salesValueByHourJsonData = makeHttpPOST(url);

        var valueByHourData = convertJsonToArray(salesValueByHourJsonData, 1);
        var options = setupChartOptions('Sales Value Comparison - Today vs ' + comparisonDateLabel, 'Hour');

        drawLineChart(options, valueByHourData, document.getElementById('salesvaluebyhourchart'), "Sorry, not found any data for the selected date range.");
    }

    function drawSalesCountByHourChart(comparisonDate, comparisonDateLabel) {
        var url = '@Url.Action("GetSalesCountByHourAsJson", "Home", new { Area = "Estate" })' + "?comparisonDate=" + comparisonDate;       
        var salesCountByHourJsonData = makeHttpPOST(url);

        var countByHourData = convertJsonToArray(salesCountByHourJsonData, 2);
        var options = setupChartOptions('Sales Count Comparison - Today vs ' + comparisonDateLabel, 'Hour');

        drawLineChart(options, countByHourData, document.getElementById('salescountbyhourchart'), "Sorry, not found any data for the selected date range.");
    }       

    Date.prototype.yyyymmdd = function () {
        var yyyy = this.getFullYear();
        var mm = this.getMonth() < 9 ? "0" + (this.getMonth() + 1) : (this.getMonth() + 1); // getMonth() is zero-based
        var dd = this.getDate() < 10 ? "0" + this.getDate() : this.getDate();

        return "".concat(yyyy).concat('-').concat(mm).concat('-').concat(dd);
    };
</script>