@using EstateAdministrationUI.Common
@inject IConfigurationService Configuration

@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Areas/Estate/Views/Shared/_Layout.cshtml";
}

@* <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jsrender/1.0.0-beta/jsrender.min.js"></script> *@

<div class="container-fluid">
    <div class="row">
        <div class="form-group">
            <label for="ComparisonDateSelect">Select Comparison Date:</label>
            <select class="custom-select" id="ComparisonDateSelect" style="width: 250px"></select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 col-sm-6 col-12">
            <div id="salesKpi" class="info-box bg-gradient-info">
                <span class="info-box-icon">
                    <i class="fa fa-receipt"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">Today's Sales</span>
                    <span class="info-box-number" id="todaysSalesLabel"></span>
                    <span class="info-box-text" id="comparisonDateSalesLabelText"></span>
                    <span class="info-box-number" id="comparisonDateSalesLabel"></span>
                    <span class="info-box-text">Variance</span>
                    <span class="info-box-text" id="salesVarianceLabelText"></span>
                </div>
            </div>
        </div>
        <div class="col-md-3 col-sm-6 col-12">
            <div id="settlementKpi" class="info-box bg-gradient-info">
                <span class="info-box-icon">
                    <i class="fa fa-money-bill-wave"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">Today's Settlement</span>
                    <span class="info-box-number" id="todaysSettlementLabel"></span>
                    <span class="info-box-text" id="comparisonDateSettlementLabelText"></span>
                    <span class="info-box-number" id="comparisonDateSettlementLabel"></span>
                    <span class="info-box-text">Variance</span>
                    <span class="info-box-text" id="settlementVarianceLabelText"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-6" id="salesvaluebyhourchart" style="height: 400px"></div>
        <div class="col-6" id="salescountbyhourchart" style="height: 400px"></div>
    </div>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script src="~/js/shared.js"></script>

<script language="javascript">

    google.charts.load('current', { 'packages': ['corechart'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawCharts);

    $(document).ready(function () {
        const select = document.getElementById('ComparisonDateSelect');
        select.addEventListener("change", (event) => {
            const selectedValue = event.target.value;
            dateComparisonChanged(selectedValue);
        });
        initDatePicker();        
    });

    function dateComparisonChanged(selectedValue){               
        getTodaysTransactionsAsJson();
        getComparisonDateTransactionsAsJson(selectedValue)
        
        getTodaysSettlementAsJson();
        getComparisonDateSettlementAsJson(selectedValue);

        drawCharts();
    }
    
    function getTodaysTransactionsAsJson() {
        $.ajax({
            url: "GetTodaysTransactionsAsJson",
            type: "POST",
            dataType: 'json'
        }).done(function (results) {
            const formattedCurrency = new Intl.NumberFormat('en-KE', { style: 'currency', currency: 'KES' }).format(results.valueOfTransactions);
            setInnnerHtml("todaysSalesLabel", formattedCurrency);
        });
    }

    function getComparisonDateTransactionsAsJson(comparisonDate) {
        $.ajax({
            url: "GetComparisonDateTransactionsAsJson?comparisonDate=" + comparisonDate,
            type: "POST",
            dataType: 'json'
        }).done(function (results) {
            setInnnerHtml("comparisonDateSalesLabelText", results.label);
            const formattedCurrency = new Intl.NumberFormat('en-KE', { style: 'currency', currency: 'KES' }).format(results.valueOfTransactions);
            setInnnerHtml("comparisonDateSalesLabel", formattedCurrency);
            const formattedPercentage = (results.variance).toLocaleString(undefined, {
                style: 'percent',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
            });
            setInnnerHtml("salesVarianceLabelText", formattedPercentage);
            setDivClassBasedOnVariance("salesKpi", results.variance)
        });
    }
               
    function getTodaysSettlementAsJson() {
        $.ajax({
            url: "GetTodaysSettlementAsJson",
            type: "POST",
            dataType: 'json'
        }).done(function (results) {
            console.log(JSON.stringify(results));
            const formattedCurrency = new Intl.NumberFormat('en-KE', { style: 'currency', currency: 'KES' }).format(results.valueOfSettlement);
            setInnnerHtml("todaysSettlementLabel", formattedCurrency);
        });
    }
    
    function getComparisonDateSettlementAsJson(comparisonDate) {
        $.ajax({
            url: "GetComparisonDateSettlementAsJson?comparisonDate=" + comparisonDate,
            type: "POST",
            dataType: 'json'
        }).done(function (results) {
            setInnnerHtml("comparisonDateSettlementLabelText", results.label);
            const formattedCurrency = new Intl.NumberFormat('en-KE', { style: 'currency', currency: 'KES' }).format(results.valueOfSettlement);
            setInnnerHtml("comparisonDateSettlementLabel", formattedCurrency);
            const formattedPercentage = (results.variance).toLocaleString(undefined, {
                style: 'percent',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
            });
            setInnnerHtml("settlementVarianceLabelText", formattedPercentage);
            setDivClassBasedOnVariance("settlementKpi", results.variance)
        });
    }      

    function initDatePicker() {
        const select = document.getElementById('ComparisonDateSelect');
        $.ajax({
            url: "GetComparisonDatesAsJson",
            type: "POST",
            dataType: 'json'
        }).done(function (results) {            
            results.forEach(function (dateOption) {
                const newOption = document.createElement('option');
                newOption.value = dateOption.item1; // This will be a date
                newOption.text = dateOption.item2;

                select.appendChild(newOption);                
            });    
            select.selectedIndex = 0;
            const changeEvent = new Event("change");
            select.dispatchEvent(changeEvent);
        });        
    }

    function convertJsonToArray(jsonData, type) {
        var data = JSON.parse(jsonData);
        var dataArray = [];

        console.log(type);
        // TODO: Factory method
        if (type === 1) 
        {
            // sales value
            dataArray = translateSalesValueByHour(data);
        }
        else{
            // sales count
            dataArray = translateSalesCountByHour(data);
        }

        return google.visualization.arrayToDataTable(dataArray);
    }

    function drawCharts(){
        // Get the comparison date
        var comparisonDate = document.getElementById("ComparisonDateSelect").value;

        drawSalesValueByHourChart(comparisonDate);
        drawSalesCountByHourChart(comparisonDate);
    }

    function drawSalesValueByHourChart(comparisonDate) {
        var salesValueByHourJsonData = $.ajax({
            url: "GetSalesValueByHourAsJson?comparisonDate=" + comparisonDate,
            dataType: "json",
            type: "POST",
            async: false
        }).responseText;

        // Convert JSON value to google format array
        var valueByHourData = convertJsonToArray(salesValueByHourJsonData, 1);

        var options = setupChartOptions('Sales Value Comparison - Today vs ' + comparisonDate , 'Hour');

        if (valueByHourData.getNumberOfRows() > 0) {
            var chart = new google.visualization.LineChart(document.getElementById('salesvaluebyhourchart'));
            chart.draw(valueByHourData, options);
        }
        else {
            $("#salesvaluebyhourchart").empty();
            $("#salesvaluebyhourchart").append("Sorry, not found any data for the selected date range.");
        }
    }

    function drawSalesCountByHourChart(comparisonDate) {
        var salesValueByCountJsonData = $.ajax({
            url: "GetSalesCountByHourAsJson?comparisonDate=" + comparisonDate,
            dataType: "json",
            type: "POST",
            async: false
        }).responseText;

        //console.log(salesValueByHourJsonData);

        // Convert JSON value to google format array
        var countByHourData = convertJsonToArray(salesValueByCountJsonData, 2);
        var options = setupChartOptions('Sales Count Comparison - Today vs ' + comparisonDate, 'Hour');

        if (countByHourData.getNumberOfRows() > 0) {
            var chart = new google.visualization.LineChart(document.getElementById('salescountbyhourchart'));
            chart.draw(countByHourData, options);
        }
        else {
            $("#salescountbyhourchart").empty();
            $("#salescountbyhourchart").append("Sorry, not found any data for the selected date range.");
        }
    }

    function setupChartOptions(chartTitle, hAxisTitle) {
         var options = {
           title: chartTitle,
           //curveType: 'function',
           legend: { position: 'bottom' },
           hAxis: { 
                title: hAxisTitle,
                maxValue: 24
           },                                  
            colors: getChartColors(),
            animation: {
                startup: true,
                duration: 1000,
                easing: 'out'
            },
         };

        return options;
    }

    Date.prototype.yyyymmdd = function () {
        var yyyy = this.getFullYear();
        var mm = this.getMonth() < 9 ? "0" + (this.getMonth() + 1) : (this.getMonth() + 1); // getMonth() is zero-based
        var dd = this.getDate() < 10 ? "0" + this.getDate() : this.getDate();

        return "".concat(yyyy).concat('-').concat(mm).concat('-').concat(dd);
    };
</script>