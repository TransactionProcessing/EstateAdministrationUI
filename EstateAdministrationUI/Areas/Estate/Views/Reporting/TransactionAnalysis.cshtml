@using Shared;
@using Shared.General
@using EstateAdministrationUI.Common
@inject IConfigurationService Configuration

@{
    ViewBag.Title = "Transaction Analysis";
    Layout = "~/Areas/Estate/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="form-group">
            <label for="ComparisonDateSelect">Select Comparison Date:</label>
            <select class="custom-select" id="ComparisonDateSelect" style="width: 250px"></select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 col-sm-6 col-12">
            <div id="salesKpi" class="info-box bg-gradient-info">
                <span class="info-box-icon">
                    <i class="fa fa-receipt"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">Today's Sales</span>
                    <span class="info-box-number" id="todaysSalesLabel"></span>
                    <span class="info-box-text" id="comparisonDateSalesLabelText"></span>
                    <span class="info-box-number" id="comparisonDateSalesLabel"></span>
                    <span class="info-box-text">Variance</span>
                    <span class="info-box-text" id="salesVarianceLabelText"></span>
                </div>
            </div>
        </div>
        <div class="col-md-3 col-sm-6 col-12">
            <div id="failedSalesLowCreditKpi" class="info-box bg-gradient-info">
                <span class="info-box-icon">
                    <i class="fa fa-receipt"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">Today's Failed Sales Due to Low Credit</span>
                    <span class="info-box-number" id="todaysFailedLowCreditSalesLabel"></span>
                    <span class="info-box-text" id="comparisonDateFailedLowCreditSalesLabelText"></span>
                    <span class="info-box-number" id="comparisonDateFailedLowCreditSalesLabel"></span>
                    <span class="info-box-text">Variance</span>
                    <span class="info-box-text" id="failedLowCreditSalesVarianceLabelText"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 col-sm-6 col-12">
            <div class="info-box bg-gradient-info">
                <span class="info-box-icon">
                    <i class="fa fa-receipt"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">Today's Active Merchants</span>
                    <span class="info-box-number" id="activeMerchantsLabel"></span>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 col-sm-6 col-12">
            <div class="info-box bg-gradient-warning">
                <span class="info-box-icon">
                    <i class="fa fa-receipt"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">Merchants with no sales in last hour</span>
                    <span class="info-box-number" id="merchantsNoSalesInLastHourLabel"></span>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 col-sm-6 col-12">
            <div class="info-box bg-gradient-danger">
                <span class="info-box-icon">
                    <i class="fa fa-receipt"></i>
                </span>
                <div class="info-box-content">
                    <span class="info-box-text">Merchants with no sales in last 7 days</span>
                    <span class="info-box-number" id="merchantsNoSalesInLast7DaysLabel"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-4" id="bottom3Merchants" style="height: 400px"></div>
        <div class="col-4" id="bottom3Products" style="height: 400px"></div>
        <div class="col-4" id="bottom3Operators" style="height: 400px"></div>
    </div>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script src="~/js/shared.js"></script>
<script src="~/js/resulthandlers.js"></script>

<script language="javascript">

    google.charts.load('current', { 'packages': ['bar'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawCharts);

    $(document).ready(function () {
        const select = document.getElementById('ComparisonDateSelect');
        select.addEventListener("change", (event) => {                       
            const selectedOption = select.options[select.selectedIndex];

            const selectedText = selectedOption.text;
            const selectedValue = selectedOption.value;

            dateComparisonChanged(selectedValue, selectedText);
        });
        initDatePicker();        
    });

    function drawCharts(){
        drawBottom3MerchantsBySalesValueChart();
        drawBottom3OperatorsBySalesValueChart();
        drawBottom3ProductsBySalesValueChart();
    }

    function initDatePicker() {
        const select = document.getElementById('ComparisonDateSelect');
        $.ajax({
            url: '@Url.Action("GetComparisonDatesAsJson", "Reporting", new { Area = "Estate" })',
            type: "POST",
            dataType: 'json'
        }).done(function (results) {
            results.forEach(function (dateOption) {
                const newOption = document.createElement('option');
                newOption.value = dateOption.item1; // This will be a date
                newOption.text = dateOption.item2;

                select.appendChild(newOption);
            });
            select.selectedIndex = 0;
            const changeEvent = new Event("change");
            select.dispatchEvent(changeEvent);
        });
    }

    function dateComparisonChanged(selectedValue, text){               
        getComparisonDateTransactionsAsJson(selectedValue, text);
        getComparisonDateFailedTransactionsDueToLowCreditAsJson(selectedValue, text);
        getMerchantKpisAsJson();
        drawCharts();
    }

    function getComparisonDateTransactionsAsJson(comparisonDate, comparisonDateLabel) {
        var url = '@Url.Action("GetComparisonDateTransactionsAsJson", "Reporting", new { Area = "Estate" })' + "?comparisonDate=" + comparisonDate + "&comparisonDateLabel=" + comparisonDateLabel;
        makeHttpPOSTWithHandler(url, comparisonDateTransactionsResultHandler);
    }

    function getComparisonDateFailedTransactionsDueToLowCreditAsJson(comparisonDate, comparisonDateLabel) {
        var url = '@Url.Action("GetComparisonDateFailedTransactionsDueToLowCreditAsJson", "Reporting", new { Area = "Estate" })' + "?comparisonDate=" + comparisonDate + "&comparisonDateLabel=" + comparisonDateLabel;
        makeHttpPOSTWithHandler(url, comparisonDateFailedTransactionsDueToLowCredit);
    }

    function getMerchantKpisAsJson() {
        var url = '@Url.Action("GetMerchantKpisAsJson", "Reporting", new { Area = "Estate" })';
        makeHttpPOSTWithHandler(url, merchantKpisResulthandler);
    }

    function drawBottom3MerchantsBySalesValueChart() {
        var url = '@Url.Action("GetBottom3MerchantsBySalesValueAsJson", "Reporting", new { Area = "Estate" })';
        var bottom3MerchantsBySalesValueChart = makeHttpPOST(url);

        // Convert JSON value to google format array
        var merchantData = convertJsonToArray(bottom3MerchantsBySalesValueChart, 1);

        var options = setupChartOptions('Bottom 3 Merchants');

        drawBarChart(options, merchantData, document.getElementById('bottom3Merchants'), "Sorry, not found any data for the selected date range.");
    }

    function drawBottom3OperatorsBySalesValueChart() {
        var url = '@Url.Action("GetBottom3OperatorsBySalesValueAsJson", "Reporting", new { Area = "Estate" })';
        var bottom3OperatorsBySalesValueChart = makeHttpPOST(url);

        // Convert JSON value to google format array
        var operatorData = convertJsonToArray(bottom3OperatorsBySalesValueChart, 2);

        var options = setupChartOptions('Bottom 3 Operators');

        drawBarChart(options, operatorData, document.getElementById('bottom3Operators'), "Sorry, not found any data for the selected date range.");
    }

    function drawBottom3ProductsBySalesValueChart() {
        var url = '@Url.Action("GetBottom3ProductsBySalesValueAsJson", "Reporting", new { Area = "Estate" })';
        var bottom3ProductsBySalesValueChart = makeHttpPOST(url);

        // Convert JSON value to google format array
        var productData = convertJsonToArray(bottom3ProductsBySalesValueChart, 3);

        var options = setupChartOptions('Bottom 3 Products');

        drawBarChart(options, productData, document.getElementById('bottom3Products'), "Sorry, not found any data for the selected date range.");
    }

    function setupChartOptions(chartTitle) {
        var options = {
            title: chartTitle,
            legend: { position: 'bottom' },
            colors: getChartColors(),
            bar: { groupWidth: "90%" },
            animation: {
                startup: true,
                duration: 1000,
                easing: 'out'
            },
        };

        return options;
    }

    function convertJsonToArray(jsonData, type) {
        var data = JSON.parse(jsonData);
        var dataArray = [];
                
        
        // TODO: Factory method
        if (type === 1) {
            // bottom merchants
            dataArray = translateBottom3MerchantsBySalesValue(data)
        }
        else if (type === 2) {
            // bottom operators            
            dataArray = translateBottom3OperatorsBySalesValue(data)
        }
        else if (type === 3) {
            // bottom operators
            dataArray = translateBottom3ProductsBySalesValue(data)           
        }

        return google.visualization.arrayToDataTable(dataArray);
    }

    function translateBottom3MerchantsBySalesValue(data) {
        var dataArray = [];
        if (data === null) {
            return [];
        }

        if (data.bottomMerchants === null || data.bottomMerchants.length == 0) {
            return [];
        }
       
        // Add the labels first
        dataArray.push([
            { label: "Merchant", type: "string" },
            { label: "Sales", type: "number" }
        ]);

        data.bottomMerchants.forEach((merchant) => {
            var item = {
                c: [{ v: merchant.merchantName }, { v: merchant.salesValue }]
            };
            dataArray.push(item);
        });
        
        return dataArray;
    }

    function translateBottom3OperatorsBySalesValue(data) {
        var dataArray = [];

        if (data === null) {
            return [];
        }

        if (data.bottomOperators === null) {
            return [];
        }

        // Add the labels first
        dataArray.push([
            { label: "Operator", type: "string" },
            { label: "Sales", type: "number" }
        ]);

        data.bottomOperators.forEach((operator) => {
            var item = {
                c: [{ v: operator.operatorName }, { v: operator.salesValue }]
            };
            dataArray.push(item);
        });
        return dataArray;
    }

    function translateBottom3ProductsBySalesValue(data) {
        var dataArray = [];

        if (data === null) {
            return [];
        }

        if (data.bottomProducts === null) {
            return [];
        }

        // Add the labels first
        dataArray.push([
            { label: "Product", type: "string" },
            { label: "Value", type: "number" }
        ]);

        data.bottomProducts.forEach((product) => {
            var item = {
                c: [{ v: product.productName }, { v: product.salesValue }]
            };
            dataArray.push(item);
        });
        
        return dataArray;
    }

</script>